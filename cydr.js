// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.fff = function(msg, msg2) {
    if (msg2) {
      return console.log(msg, msg2);
    } else {
      return console.log(msg);
    }
  };

  window.Cydr = {};

  window.Cydr.Config = {};

  window.Cydr.EventDispatcher = {
    events: [],
    fire: function(sku) {
      var e, evt, func, id, listenerID, model, part, parts, prop, subscribers, type, _i, _len, _results;
      parts = sku.split(":");
      type = parts[0], model = parts[1], prop = parts[2], id = parts[3];
      evt = [];
      _results = [];
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        evt.push(part);
        e = evt.join(":");
        subscribers = Cydr.EventDispatcher.events[e] || [];
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (listenerID in subscribers) {
            func = subscribers[listenerID];
            _results1.push(func(e, type, model, prop, id));
          }
          return _results1;
        })());
      }
      return _results;
    },
    subscribe: function(sku, listener, func) {
      if (!Cydr.EventDispatcher.events[sku]) {
        Cydr.EventDispatcher.events[sku] = [];
      }
      return Cydr.EventDispatcher.events[sku]["listener_" + listener.__ID__] = func.bind(listener);
    },
    revoke: function(sku, listener) {
      delete Cydr.EventDispatcher.events[sku]["listener_" + listener.__ID__];
      if (Cydr.EventDispatcher.events[sku].length === 0) {
        return delete Cydr.EventDispatcher.events[sku];
      }
    }
  };

  Cydr.Object = (function() {

    Object._instanceCount = 0;

    Object._instances = [];

    Object.prototype.__ID__ = null;

    function Object() {
      Cydr.Object._instanceCount++;
      this.__ID__ = Cydr.Object._instanceCount;
    }

    Object.prototype.getClass = function() {
      return this.constructor.name;
    };

    Object.prototype.getConfig = function(prop, key) {
      if (!Cydr.Config[this.getClass()]) {
        Cydr.Config[this.getClass()] = [];
      }
      if (key) {
        if (!Cydr.Config[this.getClass()][prop]) {
          Cydr.Config[this.getClass()][prop] = [];
        }
        return Cydr.Config[this.getClass()][prop][key];
      }
      return Cydr.Config[this.getClass()][prop];
    };

    Object.prototype.setConfig = function(prop, val) {
      if (!Cydr.Config[this.getClass()]) {
        Cydr.Config[this.getClass()] = [];
      }
      return Cydr.Config[this.getClass()][prop] = val;
    };

    Object.prototype.pushConfig = function(prop, val1, val2) {
      if (!Cydr.Config[this.getClass()]) {
        Cydr.Config[this.getClass()] = [];
      }
      if (!Cydr.Config[this.getClass()][prop]) {
        Cydr.Config[this.getClass()][prop] = [];
      }
      if (val2) {
        if (!Cydr.Config[this.getClass()][prop][val1]) {
          Cydr.Config[this.getClass()][prop][val1] = [];
        }
        return Cydr.Config[this.getClass()][prop][val1].push(val2);
      } else {
        return Cydr.Config[this.getClass()][prop].push(val1);
      }
    };

    return Object;

  })();

  Cydr.Binding = (function(_super) {

    __extends(Binding, _super);

    Binding.prototype.bindingAttribute = "";

    Binding.prototype.bindingExec = null;

    Binding.prototype.element = null;

    Binding.prototype.model = null;

    Binding.prototype.exportValueEvent = null;

    Binding.prototype.importFunction = null;

    Binding.prototype.allowedTags = [];

    Binding.prototype.parent = null;

    function Binding(model, element, parent) {
      var attValue;
      Binding.__super__.constructor.call(this);
      this.element = element;
      this.model = model;
      attValue = this.element.getAttribute(this.getBindingAttribute());
      this.bindingExec = attValue;
      this.parent = parent;
    }

    Binding.prototype.init = function() {
      var _ref,
        _this = this;
      if (this.allowedTags.length && (_ref = this.element.tagName, __indexOf.call(this.allowedTags, _ref) < 0)) {
        alert("" + (this.getBindingAttribute()) + " binding must be on one of the following tags: " + (this.allowedTags.join(',')) + ".");
      }
      if (this.exportValueEvent) {
        this.element.addEventListener(this.exportValueEvent, function() {
          return _this.exportValue();
        });
      }
      this.element.setAttribute("title", "ID: " + (this.model.getID()));
      this.subscribe();
      return this.importValue();
    };

    Binding.prototype.importValue = function() {};

    Binding.prototype.exportValue = function() {};

    Binding.prototype.subscribe = function() {
      var b, dependency, evt, parts, result, t, _i, _len, _results;
      if (this.model.hasProp(this.bindingExec) || this.model.hasCollection(this.bindingExec)) {
        evt = "ModelUpdated:" + (this.model.getClass()) + ":" + this.bindingExec + ":" + (this.model.getID());
        t = (this.element.getAttribute("title")) || "";
        this.element.setAttribute("title", "" + t + "//" + evt);
        Cydr.EventDispatcher.subscribe(evt, this, function() {
          return this.importValue();
        });
      } else if (!this.model.isAnalysedExpression(this.bindingExec)) {
        b = this.bindingExec;
        this.model.subscribeToEvent("ModelAccessed", function(evt, type, model, prop, id) {
          return this.pushConfig("analysedExpressions", b, "" + model + ":" + prop + ":" + id);
        });
        Cydr.Model.frozen = true;
        this.executeBindingExpression();
        Cydr.Model.frozen = false;
        this.model.revokeSubscription("ModelAccessed");
      }
      result = this.model.getDependenciesForExpression(this.bindingExec);
      if (result) {
        _results = [];
        for (_i = 0, _len = result.length; _i < _len; _i++) {
          dependency = result[_i];
          parts = dependency.split(":");
          evt = "ModelUpdated:" + parts[0] + ":" + parts[1] + ":" + parts[2];
          t = (this.element.getAttribute("title")) || "";
          this.element.setAttribute("title", "" + t + "//" + evt);
          console.log("" + this.bindingExec + " will listen to " + evt);
          _results.push(Cydr.EventDispatcher.subscribe(evt, this, function() {
            return this.importValue();
          }));
        }
        return _results;
      }
    };

    Binding.prototype.getBindingAttribute = function() {
      var klass;
      klass = this.constructor.name.replace(/Binding$/, '');
      return "cydr-" + (klass.toLowerCase());
    };

    Binding.prototype.create = function(model, element) {
      return new Cydr[this.getClass()](model, element);
    };

    Binding.prototype.executeBindingExpression = function() {
      return this.model.exec(this.bindingExec, this);
    };

    Binding.prototype.getValue = function() {
      return this.executeBindingExpression();
    };

    return Binding;

  })(Cydr.Object);

  Cydr.ContentBinding = (function(_super) {

    __extends(ContentBinding, _super);

    function ContentBinding() {
      return ContentBinding.__super__.constructor.apply(this, arguments);
    }

    ContentBinding.prototype.importValue = function() {
      return this.element.innerHTML = this.getValue();
    };

    return ContentBinding;

  })(Cydr.Binding);

  Cydr.SubmitBinding = (function(_super) {

    __extends(SubmitBinding, _super);

    function SubmitBinding() {
      return SubmitBinding.__super__.constructor.apply(this, arguments);
    }

    SubmitBinding.prototype.allowedTags = ["FORM"];

    SubmitBinding.prototype.init = function() {
      var _this = this;
      this.element.addEventListener("submit", function(e) {
        var formData, func;
        e.preventDefault();
        formData = window.form2object(_this.element);
        func = _this.bindingExec;
        if (typeof _this.model[func] === "function") {
          return _this.model[func](formData, _this.element);
        }
      });
      return SubmitBinding.__super__.init.call(this);
    };

    return SubmitBinding;

  })(Cydr.Binding);

  Cydr.ValueBinding = (function(_super) {

    __extends(ValueBinding, _super);

    function ValueBinding() {
      return ValueBinding.__super__.constructor.apply(this, arguments);
    }

    ValueBinding.prototype.allowedTags = ["INPUT", "SELECT"];

    ValueBinding.prototype.exportValueEvent = "change";

    ValueBinding.prototype.importValue = function() {
      var opt, _i, _len, _ref, _results;
      if (this.element.tagName === "INPUT") {
        return this.element.value = this.getValue();
      } else if (this.element.tagName === "SELECT") {
        _ref = this.element.options;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          opt = _ref[_i];
          if (opt.value === this.getValue().toString()) {
            opt.selected = true;
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    ValueBinding.prototype.exportValue = function() {
      var val, _ref;
      if (this.element.tagName === "INPUT") {
        return this.model.set(this.bindingExec, this.element.value);
      } else if (this.element.tagName === "SELECT") {
        val = (_ref = this.element.options[this.element.selectedIndex]) != null ? _ref.getAttribute("value") : void 0;
        if (val == null) {
          val = "";
        }
        return this.model.set(this.bindingExec, val);
      }
    };

    return ValueBinding;

  })(Cydr.Binding);

  Cydr.CheckedBinding = (function(_super) {

    __extends(CheckedBinding, _super);

    function CheckedBinding() {
      return CheckedBinding.__super__.constructor.apply(this, arguments);
    }

    CheckedBinding.prototype.allowedTags = ["INPUT"];

    CheckedBinding.prototype.exportValueEvent = "change";

    CheckedBinding.prototype.importValue = function() {
      var v;
      v = this.getValue();
      if ((v != null ? v.isDataType : void 0) && (!v.isFalsy())) {
        return this.element.setAttribute("checked", "checked");
      } else {
        return this.element.removeAttribute("checked");
      }
    };

    CheckedBinding.prototype.exportValue = function() {
      return this.model.set(this.bindingExec, this.element.checked);
    };

    return CheckedBinding;

  })(Cydr.Binding);

  Cydr.JSONBinding = (function(_super) {

    __extends(JSONBinding, _super);

    function JSONBinding() {
      return JSONBinding.__super__.constructor.apply(this, arguments);
    }

    JSONBinding.prototype.subscribe = function() {
      var b, className, dependency, obj, parts, prop, result, _i, _len, _results;
      if (!this.model.isAnalysedExpression(this.bindingExec)) {
        b = this.bindingExec;
        this.model.subscribeToEvent("ModelAccessed", function(evt, type, model, prop, id) {
          return this.pushConfig("analysedExpressions", b, "" + model + ":" + prop + ":" + id);
        });
        Cydr.Model.frozen = true;
        obj = this.executeBindingExpression();
        if (typeof obj !== "object") {
          console.error("" + (this.getClass()) + " binding must return a JSON object of classname: property/function pairs.");
          return;
        }
        for (className in obj) {
          prop = obj[className];
          if (typeof prop === "function") {
            prop();
          } else {
            this.model.exec(prop);
          }
        }
        Cydr.Model.frozen = false;
        this.model.revokeSubscription("ModelAccessed");
      }
      result = this.model.getDependenciesForExpression(this.bindingExec);
      if (result) {
        _results = [];
        for (_i = 0, _len = result.length; _i < _len; _i++) {
          dependency = result[_i];
          parts = dependency.split(":");
          _results.push(Cydr.EventDispatcher.subscribe("ModelUpdated:" + (this.model.getClass()) + ":" + parts[1] + ":" + (this.model.getID()), this, function() {
            return this.importValue();
          }));
        }
        return _results;
      }
    };

    return JSONBinding;

  })(Cydr.Binding);

  Cydr.ExtraclassesBinding = (function(_super) {

    __extends(ExtraclassesBinding, _super);

    function ExtraclassesBinding() {
      return ExtraclassesBinding.__super__.constructor.apply(this, arguments);
    }

    ExtraclassesBinding.prototype.importValue = function() {
      var cssClass, exec, newClass, result, rx, _ref;
      _ref = this.executeBindingExpression();
      for (cssClass in _ref) {
        exec = _ref[cssClass];
        rx = new RegExp("(^|\\s)" + cssClass, "g");
        newClass = this.element.className.replace(rx, "");
        if (typeof exec === "function") {
          result = exec();
          if (!(result != null ? result.isDataType : void 0)) {
            return;
          }
          if (!result.isFalsy()) {
            this.element.className += this.element.className.length ? " " + cssClass : cssClass;
          } else {
            this.element.className = newClass;
          }
        }
      }
    };

    return ExtraclassesBinding;

  })(Cydr.JSONBinding);

  Cydr.AttrBinding = (function(_super) {

    __extends(AttrBinding, _super);

    function AttrBinding() {
      return AttrBinding.__super__.constructor.apply(this, arguments);
    }

    AttrBinding.prototype.importValue = function() {
      var attribute, exec, _ref, _results;
      if (typeof this.getValue() !== "object") {
        console.error("" + (this.getClass()) + " binding must return a JSON object of attribute-name: property/function pairs.");
      }
      _ref = this.getValue();
      _results = [];
      for (attribute in _ref) {
        exec = _ref[attribute];
        if (typeof exec === "function") {
          _results.push(this.element.setAttribute(attribute, exec()));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return AttrBinding;

  })(Cydr.JSONBinding);

  Cydr.VisibleBinding = (function(_super) {

    __extends(VisibleBinding, _super);

    function VisibleBinding() {
      return VisibleBinding.__super__.constructor.apply(this, arguments);
    }

    VisibleBinding.prototype.importValue = function() {
      if (this.getValue().isFalsy()) {
        return this.element.style.display = "none";
      } else {
        return this.element.style.display = null;
      }
    };

    return VisibleBinding;

  })(Cydr.Binding);

  Cydr.HiddenBinding = (function(_super) {

    __extends(HiddenBinding, _super);

    function HiddenBinding() {
      return HiddenBinding.__super__.constructor.apply(this, arguments);
    }

    HiddenBinding.prototype.importValue = function() {
      if (this.getValue().isFalsy()) {
        return this.element.style.display = null;
      } else {
        return this.element.style.display = "none";
      }
    };

    return HiddenBinding;

  })(Cydr.Binding);

  Cydr.ClickBinding = (function(_super) {

    __extends(ClickBinding, _super);

    function ClickBinding() {
      return ClickBinding.__super__.constructor.apply(this, arguments);
    }

    ClickBinding.prototype.init = function() {
      var _this = this;
      this.element.addEventListener("click", function(e) {
        e.preventDefault();
        return _this.executeBindingExpression();
      });
      return ClickBinding.__super__.init.call(this);
    };

    return ClickBinding;

  })(Cydr.Binding);

  Cydr.LoopBinding = (function(_super) {

    __extends(LoopBinding, _super);

    LoopBinding.prototype.template = null;

    function LoopBinding(model, element, parent) {
      this.nodes = [];
      this.modelNodeMap = [];
      LoopBinding.__super__.constructor.call(this, model, element, parent);
    }

    LoopBinding.prototype.init = function() {
      if (this.nodes.length === 0) {
        this.loadTemplate();
      }
      return LoopBinding.__super__.init.call(this);
    };

    LoopBinding.prototype.loadTemplate = function() {
      var dummy, n, nodes, sib, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.element.getElementsByTagName("*");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        if (typeof n.setAttribute === "function") {
          n.setAttribute("cydr-ignore", "true");
        }
      }
      nodes = this.element.innerHTML;
      dummy = document.createElement("div");
      dummy.innerHTML = nodes;
      this.clearContents();
      _ref1 = dummy.getElementsByTagName("*");
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        n = _ref1[_j];
        if (typeof n.removeAttribute === "function") {
          n.removeAttribute("cydr-ignore");
        }
      }
      this.template = dummy;
      sib = this.template.children[0];
      this.nodes.push(sib);
      _results = [];
      while (true) {
        sib = sib.nextSibling;
        if (!sib) {
          break;
        }
        if (sib.tagName) {
          _results.push(nodes.push(sib));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    LoopBinding.prototype.clearContents = function() {
      var _results;
      _results = [];
      while (this.element.hasChildNodes()) {
        _results.push(this.element.removeChild(this.element.lastChild));
      }
      return _results;
    };

    LoopBinding.prototype.importValue = function() {
      var list,
        _this = this;
      this.clearContents();
      list = this.executeBindingExpression();
      return list.each(function(model) {
        var cachedNodes, n, node, _i, _j, _len, _len1, _ref, _results, _results1;
        cachedNodes = _this.modelNodeMap[model.getID()];
        if (cachedNodes) {
          _results = [];
          for (_i = 0, _len = cachedNodes.length; _i < _len; _i++) {
            node = cachedNodes[_i];
            _results.push(_this.element.appendChild(node));
          }
          return _results;
        } else {
          _this.modelNodeMap[model.getID()] = [];
          _ref = _this.nodes;
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            node = _ref[_j];
            n = node.cloneNode(true);
            _this.element.appendChild(n);
            if (typeof n.removeAttribute === "function") {
              n.removeAttribute("cydr-ignore");
            }
            model.applyBindingsToNode(n, _this);
            _results1.push(_this.modelNodeMap[model.getID()].push(n));
          }
          return _results1;
        }
      });
    };

    return LoopBinding;

  })(Cydr.Binding);

  Cydr.OptionsBinding = (function(_super) {

    __extends(OptionsBinding, _super);

    function OptionsBinding() {
      return OptionsBinding.__super__.constructor.apply(this, arguments);
    }

    OptionsBinding.prototype.valueField = null;

    OptionsBinding.prototype.textField = null;

    OptionsBinding.prototype.caption = null;

    OptionsBinding.prototype.collection = null;

    OptionsBinding.prototype.init = function() {
      var v;
      if (this.element.tagName !== "SELECT") {
        alert("cydr-options binding must be on a select element.");
      }
      this.valueField = this.element.getAttribute("cydr-optionvalue");
      this.textField = this.element.getAttribute("cydr-optiontext");
      this.caption = this.element.getAttribute("cydr-optioncaption");
      v = this.element.getAttribute("cydr-value");
      if (v) {
        this.element.removeAttribute("cydr-value");
        this.element.setAttribute("cydr-value", v);
      }
      this.subscribe();
      return this.importValue();
    };

    OptionsBinding.prototype.importValue = function() {
      var dummy, list, val,
        _this = this;
      this.clearContents();
      val = this.element.getAttribute("cydr-value");
      if (this.caption) {
        dummy = document.createElement("option");
        dummy.setAttribute("value", "");
        dummy.innerHTML = this.caption;
        this.element.appendChild(dummy);
      }
      list = this.executeBindingExpression();
      return list.each(function(model) {
        var opt, val1, val2;
        opt = document.createElement("option");
        opt.setAttribute("cydr-content", _this.textField);
        opt.setAttribute("cydr-attr", "{value: " + _this.valueField + "}");
        val1 = model.exec(_this.valueField);
        val2 = _this.model.exec(val);
        if (val2 && (val1.isDataType && val2.isDataType) && (val1.getValue() === val2.getValue())) {
          opt.setAttribute("selected", true);
        }
        _this.element.appendChild(opt);
        return model.applyBindingsToNode(opt, _this);
      });
    };

    return OptionsBinding;

  })(Cydr.LoopBinding);

  Cydr.DataType = (function(_super) {

    __extends(DataType, _super);

    DataType.prototype._value = "";

    DataType.isDataType = true;

    DataType.prototype.isDataType = true;

    function DataType(val) {
      if (val == null) {
        val = "";
      }
      DataType.__super__.constructor.call(this);
      this._value = val;
    }

    DataType.prototype.setValue = function(val) {
      return this._value = val;
    };

    DataType.prototype.getValue = function() {
      return this._value;
    };

    DataType.prototype.isFalsy = function() {
      if (!this._value || this._value === "undefined") {
        return true;
      }
      return this._value.length === 0;
    };

    DataType.prototype.toString = function() {
      return this.getValue();
    };

    DataType.prototype.renderSortable = function() {
      return this._value;
    };

    return DataType;

  })(Cydr.Object);

  Cydr.Text = (function(_super) {

    __extends(Text, _super);

    function Text() {
      return Text.__super__.constructor.apply(this, arguments);
    }

    Text.prototype.LimitCharacterCount = function(count) {
      return this.getValue().substring(0, count);
    };

    Text.prototype.toString = function() {
      var _ref;
      return (_ref = this.getValue()) != null ? _ref.toString().replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : void 0;
    };

    Text.prototype.renderSortable = function() {
      return this._value.toUpperCase();
    };

    return Text;

  })(Cydr.DataType);

  Cydr.HTMLText = (function(_super) {

    __extends(HTMLText, _super);

    function HTMLText() {
      return HTMLText.__super__.constructor.apply(this, arguments);
    }

    HTMLText.prototype.toString = function() {
      return this.getValue();
    };

    HTMLText.prototype.renderSortable = function() {
      return this._value.toUpperCase();
    };

    return HTMLText;

  })(Cydr.DataType);

  Cydr.Boolean = (function(_super) {

    __extends(Boolean, _super);

    function Boolean() {
      return Boolean.__super__.constructor.apply(this, arguments);
    }

    Boolean.prototype.Nice = function() {
      if (this.getValue()) {
        return "Yes";
      } else {
        return "No";
      }
    };

    Boolean.prototype.isFalsy = function() {
      return !this.getValue();
    };

    Boolean.prototype.renderSortable = function() {
      return parseInt(this._value);
    };

    Boolean.prototype.getValue = function() {
      if ((this._value === 1) || (this._value === "1") || (this._value === true) || (this._value === "on")) {
        return true;
      }
      return false;
    };

    return Boolean;

  })(Cydr.DataType);

  Cydr.Model = (function(_super) {

    __extends(Model, _super);

    Model.prototype.properties = {};

    Model.prototype.has_many = {};

    Model.prototype.defaults = {};

    Model.prototype.casting = {};

    Model.prototype.expressions = {};

    Model.prototype._mutatedProperties = {};

    Model.prototype._mutatedCollections = {};

    Model.isModel = true;

    Model.prototype.isModel = true;

    Model.prototype.collection = null;

    Model.prototype.currentBinding = null;

    Model.prototype.viewModel = null;

    Model.frozen = false;

    function Model(data) {
      var f, name, prop, type, val, _ref, _ref1, _ref2, _ref3, _ref4;
      Model.__super__.constructor.call(this);
      this._mutatedProperties = {};
      this._mutatedCollections = {};
      _ref = this.properties;
      for (name in _ref) {
        type = _ref[name];
        if (!((_ref1 = Cydr[type]) != null ? _ref1.isDataType : void 0)) {
          throw new Error("DataType 'Cydr." + type + "' does not exist!");
          break;
        }
        this._mutatedProperties[name] = new Cydr[type]();
        f = new Function("return this.obj('" + name + "');");
        this[name] = f.bind(this);
      }
      _ref2 = this.has_many;
      for (name in _ref2) {
        type = _ref2[name];
        if (!((_ref3 = window[type]) != null ? _ref3.isModel : void 0)) {
          throw new Error("Model '" + type + "' does not exist!");
          break;
        }
        this._mutatedCollections[name] = new Cydr.Collection(this, type, name);
        f = new Function("return this.get('" + name + "');");
        this[name] = f.bind(this);
      }
      _ref4 = this.defaults;
      for (prop in _ref4) {
        val = _ref4[prop];
        if (this.hasProp(prop)) {
          this._mutatedProperties[prop].setValue(val);
        }
      }
      for (prop in data) {
        val = data[prop];
        if (this.hasProp(prop)) {
          this._mutatedProperties[prop].setValue(val);
        }
      }
      this._mutatedProperties["__id__"] = Cydr.Object._instanceCount;
      this._mutatedProperties["__destroyed__"] = false;
    }

    Model.prototype.set = function(prop, value) {
      if (Cydr.Model.frozen) {
        return;
      }
      this._mutatedProperties[prop].setValue(value);
      return this.notify(prop);
    };

    Model.prototype.obj = function(prop) {
      Cydr.EventDispatcher.fire("ModelAccessed:" + (this.getClass()) + ":" + prop + ":" + (this.getID()));
      if ((!this.hasProp(prop)) && (!this.hasCollection(prop)) && (typeof this[prop] === "function")) {
        return this[prop]();
      }
      return this._mutatedProperties[prop] || this._mutatedCollections[prop];
    };

    Model.prototype.exec = function(exp, binding) {
      var func, result, ret;
      ret = this._mutatedProperties[exp] || this._mutatedCollections[exp];
      if (ret) {
        return ret;
      }
      if (this[exp]) {
        return this[exp]();
      }
      if (this.getCachedExpression(exp)) {
        func = this.getCachedExpression(exp);
        try {
          this.currentBinding = binding;
          result = func(this, binding);
          this.currentBinding = null;
        } catch (e) {
          console.log("Could not run expression '" + (func.toString()) + "' on " + (this.getClass()));
          console.log(e.message);
          return new Cydr.DataType("");
        }
        return result;
      }
    };

    Model.prototype.getCachedExpression = function(exp) {
      var body, f, ret;
      if (!this.getConfig("cachedExpressions", exp)) {
        body = "with(scope) { return " + exp + ";  }";
        f = new Function("scope", "binding", body);
        this.pushConfig("cachedExpressions", exp, f);
      }
      ret = this.getConfig("cachedExpressions", exp);
      return ret[0];
    };

    Model.prototype.isAnalysedExpression = function(exp) {
      if (this.getConfig("analysedExpressions", exp)) {
        return true;
      } else {
        return false;
      }
    };

    Model.prototype.getDependenciesForExpression = function(exp) {
      return this.getConfig("analysedExpressions", exp);
    };

    Model.prototype.get = function(prop) {
      if (this._mutatedProperties[prop]) {
        Cydr.EventDispatcher.fire("ModelAccessed:" + (this.getClass()) + ":" + prop + ":" + (this.getID()));
        return this._mutatedProperties[prop].getValue();
      } else if (this._mutatedCollections[prop]) {
        Cydr.EventDispatcher.fire("ModelAccessed:" + (this.getClass()) + ":" + prop + ":" + (this.getID()));
        return this._mutatedCollections[prop];
      }
    };

    Model.prototype.castFunction = function(func) {
      var dataType;
      if (!ret.isDataType && !ret.isDataList) {
        dataType = this.casting[func] || "Text";
        if (typeof Cydr[dataType] !== "function") {
          alert("Tried to cast " + func + " as " + dataType + ", but that datatype doesn't exist.");
          return;
        }
        return new Cydr[dataType](ret);
      }
      return ret;
    };

    Model.prototype.hasProp = function(prop) {
      return this.properties[prop] !== void 0;
    };

    Model.prototype.hasCollection = function(collection) {
      return this.has_many[collection] !== void 0;
    };

    Model.prototype.getID = function() {
      return this._mutatedProperties["__id__"];
    };

    Model.prototype.Up = function() {
      var _ref, _ref1;
      return (_ref = this.currentBinding) != null ? (_ref1 = _ref.parent) != null ? _ref1.model : void 0 : void 0;
    };

    Model.prototype.bindToElement = function(el, parentBinding) {
      var alpha, att, atts, binding, klass, rx, type, _i, _len, _results;
      rx = new RegExp('^cydr-', 'i');
      alpha = new RegExp('^[a-z0-9_]+$', 'i');
      atts = el.attributes || [];
      _results = [];
      for (_i = 0, _len = atts.length; _i < _len; _i++) {
        att = atts[_i];
        if (rx.test(att.name)) {
          type = att.name.split("-").pop();
          klass = "" + (type.charAt(0).toUpperCase() + type.slice(1)) + "Binding";
          if (typeof Cydr[klass] === "function") {
            binding = new Cydr[klass](this, el, parentBinding);
            _results.push(binding.init());
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Model.prototype.applyBindingsToNode = function(node, parentBinding) {
      var att, atts, el, els, n, nl, rx, stack, _i, _len, _results;
      stack = [node];
      nl = node.getElementsByTagName("*" || []);
      els = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = nl.length; _i < _len; _i++) {
          n = nl[_i];
          _results.push(n);
        }
        return _results;
      })();
      els.unshift(node);
      rx = new RegExp('^cydr-', 'i');
      _results = [];
      for (_i = 0, _len = els.length; _i < _len; _i++) {
        el = els[_i];
        atts = (el != null ? el.attributes : void 0) || [];
        if (!(typeof el.getAttribute === "function" ? el.getAttribute("cydr-ignore") : void 0)) {
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = atts.length; _j < _len1; _j++) {
              att = atts[_j];
              if (rx.test(att.name)) {
                this.bindToElement(el, parentBinding);
                break;
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Model.prototype.getBindings = function() {
      return Cydr._modelBindings[this.getID()];
    };

    Model.prototype.notify = function(prop) {
      Cydr.EventDispatcher.fire("ModelUpdated:" + (this.getClass()) + ":" + prop + ":" + (this.getID()));
      if (this.collection) {
        return this.collection.notify();
      }
    };

    Model.prototype.setCollection = function(collection) {
      return this.collection = collection;
    };

    Model.prototype.getCollection = function() {
      return this.collection;
    };

    Model.prototype.getViewModel = function() {
      var m;
      if (this.viewModel) {
        return this.viewModel;
      }
      m = this;
      while (true) {
        if (!m.getCollection()) {
          break;
        }
        m = m.getCollection().getOwner();
      }
      this.viewModel = m;
      return this.viewModel;
    };

    Model.prototype.subscribeToEvent = function(evt, func) {
      return Cydr.EventDispatcher.subscribe(evt, this, func);
    };

    Model.prototype.revokeSubscription = function(evt) {
      return Cydr.EventDispatcher.revoke(evt, this);
    };

    return Model;

  })(Cydr.Object);

  Cydr.Collection = (function(_super) {

    __extends(Collection, _super);

    Collection.prototype.owner = null;

    Collection.prototype.model = null;

    Collection.prototype.name = null;

    function Collection(owner, model, name) {
      this.owner = owner;
      this.model = model;
      this.name = name;
      Collection.__super__.constructor.call(this);
      this._records = [];
    }

    Collection.prototype.count = function() {
      return this._records.length;
    };

    Collection.prototype.get = function() {
      var list;
      list = new Cydr.DataList(this._records);
      list.setCollection(this);
      return list;
    };

    Collection.prototype.each = function(callback) {
      return this.get().each(callback);
    };

    Collection.prototype.notify = function() {
      return this.owner.notify(this.name);
    };

    Collection.prototype.push = function(model) {
      if (!Cydr.Model.frozen) {
        this._records.push(model);
        return this.owner.notify(this.name);
      }
    };

    Collection.prototype.pushMany = function(items) {
      var i, _i, _len;
      if (items == null) {
        items = [];
      }
      if (!Cydr.Model.frozen) {
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          i = items[_i];
          this._records.push(i);
        }
        return this.owner.notify(this.name);
      }
    };

    Collection.prototype.getOwner = function() {
      return this.owner;
    };

    return Collection;

  })(Cydr.Object);

  Cydr.DataList = (function(_super) {

    __extends(DataList, _super);

    DataList.prototype.isDataList = true;

    DataList.prototype.sortField = null;

    DataList.prototype.sortDir = "ASC";

    DataList.prototype.limitNumber = null;

    DataList.prototype.collection = null;

    function DataList(items) {
      if (items == null) {
        items = [];
      }
      DataList.__super__.constructor.call(this);
      this._items = items;
      this.filters = [];
      this.resultSet = [];
    }

    DataList.prototype.setCollection = function(collection) {
      return this.collection = collection;
    };

    DataList.prototype.getItems = function() {
      return this._items;
    };

    DataList.prototype.filter = function(filter, value) {
      this.filters.push({
        filter: filter,
        value: value
      });
      return this;
    };

    DataList.prototype.sort = function(field, dir) {
      this.sortField = field;
      this.sortDir = dir;
      return this;
    };

    DataList.prototype.limit = function(limit) {
      this.limitNumber = parseInt(limit);
      return this;
    };

    DataList.prototype.execute = function() {
      var field, filterData, i, model, operator, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3,
        _this = this;
      if (this.filters.length) {
        this.resultSet;
        _ref = this.filters;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          filterData = _ref[_i];
          _ref1 = filterData.filter.split(":"), field = _ref1[0], operator = _ref1[1];
          if (!operator) {
            operator = "EqualTo";
          }
          switch (operator) {
            case "EqualTo":
              _ref2 = this._items;
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                i = _ref2[_j];
                if (i.get(field) === filterData.value) {
                  this.resultSet.push(i);
                }
              }
          }
        }
      } else {
        this.resultSet = this._items;
      }
      if (this.sortField) {
        this.resultSet = this.resultSet.sort(function(a, b) {
          var A, B, ret, reverse;
          reverse = _this.sortDir === "ASC" ? true : false;
          A = a.obj(_this.sortField).renderSortable();
          B = b.obj(_this.sortField).renderSortable();
          if (A < B) {
            ret = -1;
          } else if (A > B) {
            ret = 1;
          } else {
            ret = 0;
          }
          return ret * [-1, 1][+(!!reverse)];
        });
      }
      if (this.limitNumber) {
        this.resultSet = this.resultSet.slice(0, this.limitNumber);
      }
      _ref3 = this.resultSet;
      for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
        model = _ref3[_k];
        model.setCollection(this.collection);
      }
      return this.resultSet;
    };

    DataList.prototype.isFalsy = function() {
      return this._items.length === 0;
    };

    DataList.prototype.count = function() {
      return this.execute().length;
    };

    DataList.prototype.each = function(callback) {
      var item, results, _i, _len, _results;
      results = this.execute();
      _results = [];
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        item = results[_i];
        _results.push(callback(item));
      }
      return _results;
    };

    DataList.prototype.reset = function() {
      this.filters = [];
      this.sortField = null;
      this.sortDir = "ASC";
      this.limit = null;
      this.executed = false;
      return this.resultSet = [];
    };

    return DataList;

  })(Cydr.Object);

  Cydr.ViewModel = (function(_super) {

    __extends(ViewModel, _super);

    function ViewModel(selector) {
      var node;
      ViewModel.__super__.constructor.call(this);
      node = document.querySelector(selector);
      if (node) {
        this.applyBindingsToNode(node);
      }
    }

    return ViewModel;

  })(Cydr.Model);

}).call(this);
