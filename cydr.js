// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.l = function(msg, msg2) {
    if (msg2) {
      return console.log(msg, msg2);
    } else {
      return console.log(msg);
    }
  };

  window.Cydr = (function() {

    function Cydr() {}

    Cydr._modelBindings = [];

    Cydr._collectionBindings = [];

    Cydr._analyzedFunctions = [];

    Cydr._analysisData = {};

    Cydr._functionDependencies = [];

    Cydr.prototype.registerModelBinding = function(model, binding) {
      if (!Cydr._modelBindings[model.getClass()]) {
        Cydr._modelBindings[model.getClass()] = [];
      }
      return Cydr._modelBindings[model.getClass()].push(binding);
    };

    Cydr.prototype.getModelBindings = function(model) {
      return Cydr._modelBindings[model];
    };

    Cydr.prototype.registerCollectionBinding = function(collection, binding) {
      if (!Cydr._collectionBindings[collection]) {
        Cydr._collectionBindings[collection] = [];
      }
      return Cydr._collectionBindings[collection].push(binding);
    };

    Cydr.prototype.getCollectionBindings = function(collection) {
      if (collection == null) {
        collection = null;
      }
      if (collection) {
        return Cydr._collectionBindings[collection];
      } else {
        return Cydr._collectionBindings;
      }
    };

    Cydr.prototype.isAnalyzedFunction = function(model, func) {
      var f, funcs, _i, _len;
      funcs = Cydr._analyzedFunctions[model] || [];
      for (_i = 0, _len = funcs.length; _i < _len; _i++) {
        f = funcs[_i];
        if (f === func) {
          return true;
        }
      }
      return false;
    };

    Cydr.prototype.registerAnalyzedFunction = function(model, func) {
      if (!Cydr._analyzedFunctions[model]) {
        Cydr._analyzedFunctions[model] = [];
      }
      return Cydr._analyzedFunctions[model].push(func);
    };

    Cydr.prototype.registerFunctionDependency = function(model, prop) {
      if (!Cydr._functionDependencies[model]) {
        Cydr._functionDependencies[model] = [];
      }
      if (!Cydr._functionDependencies[model][prop]) {
        Cydr._functionDependencies[model][prop] = [];
      }
      return Cydr._functionDependencies[model][prop].push(Cydr._analysisData.model, Cydr._analysisData.func);
    };

    Cydr.prototype.getDependentFunctions = function(model, prop) {
      return Cydr._functionDependencies[model][prop] || [];
    };

    Cydr.prototype.isAnalyzing = function() {
      return Cydr._analysisData.model;
    };

    Cydr.prototype.beginAnalysis = function(model, func) {
      return Cydr._analysisData = {
        model: model,
        func: func
      };
    };

    Cydr.prototype.endAnalysis = function() {
      return Cydr._analysisData = {};
    };

    Cydr.prototype.reset = function() {
      Cydr._modelBindings = [];
      Cydr._collectionBindings = [];
      Cydr._analyzedFunctions = [];
      Cydr._analysisData = {};
      return Cydr._functionDependencies = [];
    };

    return Cydr;

  })();

  Cydr.Object = (function() {

    Object._instanceCount = 0;

    function Object() {
      Cydr.Object._instanceCount++;
    }

    Object.prototype.getClass = function() {
      return this.constructor.name;
    };

    return Object;

  })();

  Cydr.Binding = (function(_super) {

    __extends(Binding, _super);

    Binding.prototype.bindingAttribute = "";

    Binding.prototype.bindingExec = null;

    Binding.prototype.element = null;

    Binding.prototype.model = null;

    Binding.prototype.exportValueEvent = null;

    Binding.prototype.importFunction = null;

    Binding.prototype.allowedTags = [];

    function Binding(model, element) {
      var attValue;
      Binding.__super__.constructor.call(this);
      this.element = element;
      this.model = model;
      attValue = this.element.getAttribute(this.getBindingAttribute());
      this.bindingExec = attValue;
      this.importFunction = this.createImportFunction();
    }

    Binding.prototype.init = function() {
      var _ref,
        _this = this;
      if (this.allowedTags.length && (_ref = this.element.tagName, __indexOf.call(this.allowedTags, _ref) < 0)) {
        alert("" + (this.getBindingAttribute()) + " binding must be on one of the following tags: " + (this.allowedTags.join(',')) + ".");
      }
      if (this.exportValueEvent) {
        this.element.addEventListener(this.exportValueEvent, function() {
          return _this.exportValue();
        });
      }
      Cydr.prototype.registerModelBinding(this.model, this);
      return this.importValue();
    };

    Binding.prototype.importValue = function() {};

    Binding.prototype.exportValue = function() {};

    Binding.prototype.createImportFunction = function() {
      return this.importFunction = new Function("scope", "with(scope) {return " + this.bindingExec + "; }");
    };

    Binding.prototype.getBindingAttribute = function() {
      var klass;
      klass = this.constructor.name.replace(/Binding$/, '');
      return "cydr-" + (klass.toLowerCase());
    };

    Binding.prototype.create = function(model, element) {
      return new Cydr[this.getClass()](model, element);
    };

    Binding.prototype.getValue = function() {
      var result;
      result = this.importFunction(this.model);
      if (typeof result === "function") {
        return result.call(this.model);
      }
      return result;
    };

    Binding.prototype.getController = function() {
      var node;
      node = this.element;
      while (node.parentNode) {
        if (node.controller) {
          return node.controller;
        }
        node = node.parentNode;
      }
    };

    return Binding;

  })(Cydr.Object);

  Cydr.ContentBinding = (function(_super) {

    __extends(ContentBinding, _super);

    function ContentBinding() {
      return ContentBinding.__super__.constructor.apply(this, arguments);
    }

    ContentBinding.prototype.importValue = function() {
      return this.element.innerHTML = this.getValue();
    };

    return ContentBinding;

  })(Cydr.Binding);

  Cydr.SubmitBinding = (function(_super) {

    __extends(SubmitBinding, _super);

    function SubmitBinding() {
      return SubmitBinding.__super__.constructor.apply(this, arguments);
    }

    SubmitBinding.prototype.allowedTags = ["FORM"];

    SubmitBinding.prototype.init = function() {
      var _this = this;
      this.element.addEventListener("submit", function(e) {
        var formData, func;
        e.preventDefault();
        formData = window.form2object(_this.element);
        func = _this.bindingExec;
        if (typeof _this.model[func] === "function") {
          return _this.model[func](formData);
        }
      });
      return SubmitBinding.__super__.init.call(this);
    };

    return SubmitBinding;

  })(Cydr.Binding);

  Cydr.ValueBinding = (function(_super) {

    __extends(ValueBinding, _super);

    function ValueBinding() {
      return ValueBinding.__super__.constructor.apply(this, arguments);
    }

    ValueBinding.prototype.allowedTags = ["INPUT", "SELECT"];

    ValueBinding.prototype.exportValueEvent = "change";

    ValueBinding.prototype.importValue = function() {
      var opt, _i, _len, _ref, _results;
      if (this.element.tagName === "INPUT") {
        return this.element.value = this.getValue();
      } else if (this.element.tagName === "SELECT") {
        _ref = this.element.options;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          opt = _ref[_i];
          if (opt.value === this.getValue()) {
            opt.selected = true;
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    ValueBinding.prototype.exportValue = function() {
      if (this.element.tagName === "INPUT") {
        return this.model.set(this.bindingExec, this.element.value);
      } else if (this.element.tagName === "SELECT") {
        return this.model.set(this.bindingExec, this.element.options[this.element.selectedIndex].getAttribute("value"));
      }
    };

    return ValueBinding;

  })(Cydr.Binding);

  Cydr.CheckedBinding = (function(_super) {

    __extends(CheckedBinding, _super);

    function CheckedBinding() {
      return CheckedBinding.__super__.constructor.apply(this, arguments);
    }

    CheckedBinding.prototype.allowedTags = ["INPUT"];

    CheckedBinding.prototype.exportValueEvent = "change";

    CheckedBinding.prototype.importValue = function() {
      if (!this.getValue().isFalsy()) {
        return this.element.setAttribute("checked", "checked");
      } else {
        return this.element.removeAttribute("checked");
      }
    };

    CheckedBinding.prototype.exportValue = function() {
      return this.model.set(this.bindingExec, this.element.checked);
    };

    return CheckedBinding;

  })(Cydr.Binding);

  Cydr.ExtraclassesBinding = (function(_super) {

    __extends(ExtraclassesBinding, _super);

    function ExtraclassesBinding() {
      return ExtraclassesBinding.__super__.constructor.apply(this, arguments);
    }

    ExtraclassesBinding.prototype.importValue = function() {
      var cssClass, exec, newClass, result, rx, _ref, _results;
      if (typeof this.getValue() !== "object") {
        console.error("Extraclasses binding must return a JSON object of classname: property/function pairs.");
      }
      _ref = this.getValue();
      _results = [];
      for (cssClass in _ref) {
        exec = _ref[cssClass];
        rx = new RegExp("(^|\\s)" + cssClass, "g");
        newClass = this.element.className.replace(rx, "");
        if (typeof exec === "function") {
          result = exec();
          if (!result.isFalsy()) {
            _results.push(this.element.className += this.element.className.length ? " " + cssClass : cssClass);
          } else {
            _results.push(this.element.className = newClass);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return ExtraclassesBinding;

  })(Cydr.Binding);

  Cydr.AttrBinding = (function(_super) {

    __extends(AttrBinding, _super);

    function AttrBinding() {
      return AttrBinding.__super__.constructor.apply(this, arguments);
    }

    AttrBinding.prototype.importValue = function() {
      var attribute, exec, _ref, _results;
      if (typeof this.getValue() !== "object") {
        console.error("Extraclasses binding must return a JSON object of classname: property/function pairs.");
      }
      _ref = this.getValue();
      _results = [];
      for (attribute in _ref) {
        exec = _ref[attribute];
        if (typeof exec === "function") {
          _results.push(this.element.setAttribute(attribute, exec()));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return AttrBinding;

  })(Cydr.Binding);

  Cydr.VisibleBinding = (function(_super) {

    __extends(VisibleBinding, _super);

    function VisibleBinding() {
      return VisibleBinding.__super__.constructor.apply(this, arguments);
    }

    VisibleBinding.prototype.importValue = function() {
      if (this.getValue().isFalsy()) {
        return this.element.style.display = "none";
      } else {
        return this.element.style.display = null;
      }
    };

    return VisibleBinding;

  })(Cydr.Binding);

  Cydr.HiddenBinding = (function(_super) {

    __extends(HiddenBinding, _super);

    function HiddenBinding() {
      return HiddenBinding.__super__.constructor.apply(this, arguments);
    }

    HiddenBinding.prototype.importValue = function() {
      if (this.getValue().isFalsy()) {
        return this.element.style.display = null;
      } else {
        return this.element.style.display = "none";
      }
    };

    return HiddenBinding;

  })(Cydr.Binding);

  Cydr.ClickBinding = (function(_super) {

    __extends(ClickBinding, _super);

    function ClickBinding() {
      return ClickBinding.__super__.constructor.apply(this, arguments);
    }

    ClickBinding.prototype.init = function() {
      var _this = this;
      this.element.addEventListener("click", function(e) {
        e.preventDefault();
        return _this.importFunction(_this.model);
      });
      return ClickBinding.__super__.init.call(this);
    };

    return ClickBinding;

  })(Cydr.Binding);

  Cydr.LoopBinding = (function(_super) {

    __extends(LoopBinding, _super);

    function LoopBinding() {
      return LoopBinding.__super__.constructor.apply(this, arguments);
    }

    LoopBinding.prototype.template = null;

    LoopBinding.prototype.nodes = [];

    LoopBinding.prototype.init = function() {
      if (this.nodes.length === 0) {
        this.loadTemplate();
      }
      return LoopBinding.__super__.init.call(this);
    };

    LoopBinding.prototype.loadTemplate = function() {
      var dummy, n, nodes, sib, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.element.getElementsByTagName("*");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        if (typeof n.setAttribute === "function") {
          n.setAttribute("cydr-ignore", "true");
        }
      }
      nodes = this.element.innerHTML;
      dummy = document.createElement("div");
      dummy.innerHTML = nodes;
      this.clearContents();
      _ref1 = dummy.getElementsByTagName("*");
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        n = _ref1[_j];
        if (typeof n.removeAttribute === "function") {
          n.removeAttribute("cydr-ignore");
        }
      }
      this.template = dummy;
      sib = this.template.children[0];
      this.nodes.push(sib);
      _results = [];
      while (true) {
        sib = sib.nextSibling;
        if (!sib) {
          break;
        }
        if (sib.tagName) {
          _results.push(nodes.push(sib));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    LoopBinding.prototype.clearContents = function() {
      var _results;
      _results = [];
      while (this.element.hasChildNodes()) {
        _results.push(this.element.removeChild(this.element.lastChild));
      }
      return _results;
    };

    LoopBinding.prototype.importValue = function() {
      var i, list, model, n, node, _i, _len, _ref, _results;
      this.clearContents();
      list = this.model.get(this.bindingExec);
      _ref = list.getItems();
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        model = _ref[i];
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = this.nodes;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            node = _ref1[_j];
            n = node.cloneNode(true);
            this.element.appendChild(n);
            if (typeof n.removeAttribute === "function") {
              n.removeAttribute("cydr-ignore");
            }
            _results1.push(model.applyBindingsToNode(n));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return LoopBinding;

  })(Cydr.Binding);

  Cydr.OptionsBinding = (function(_super) {

    __extends(OptionsBinding, _super);

    function OptionsBinding() {
      return OptionsBinding.__super__.constructor.apply(this, arguments);
    }

    OptionsBinding.prototype.valueField = null;

    OptionsBinding.prototype.textField = null;

    OptionsBinding.prototype.caption = null;

    OptionsBinding.prototype.collection = null;

    OptionsBinding.prototype.init = function() {
      if (this.element.tagName !== "SELECT") {
        alert("cydr-options binding must be on a select element.");
      }
      this.valueField = this.element.getAttribute("cydr-optionvalue");
      this.textField = this.element.getAttribute("cydr-optiontext");
      this.caption = this.element.getAttribute("cydr-optioncaption");
      Cydr.prototype.registerModelBinding(this.model, this);
      return this.importValue();
    };

    OptionsBinding.prototype.importValue = function() {
      var dummy, i, list, model, opt, _i, _len, _ref, _results;
      this.clearContents();
      if (this.caption) {
        dummy = document.createElement("option");
        dummy.setAttribute("value", "");
        dummy.innerHTML = this.caption;
        this.element.appendChild(dummy);
      }
      list = this.model.get(this.bindingExec);
      _ref = list.getItems();
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        model = _ref[i];
        opt = document.createElement("option");
        opt.setAttribute("cydr-content", this.textField);
        opt.setAttribute("cydr-attr", "{value: " + this.valueField + "}");
        this.element.appendChild(opt);
        _results.push(model.applyBindingsToNode(opt));
      }
      return _results;
    };

    return OptionsBinding;

  })(Cydr.LoopBinding);

  Cydr.DataType = (function(_super) {

    __extends(DataType, _super);

    DataType.prototype._value = "";

    DataType.isDataType = true;

    function DataType(val) {
      if (val == null) {
        val = "";
      }
      DataType.__super__.constructor.call(this);
      this._value = val;
    }

    DataType.prototype.setValue = function(val) {
      return this._value = val;
    };

    DataType.prototype.getValue = function() {
      return this._value;
    };

    DataType.prototype.isFalsy = function() {
      if (!this._value || this._value === "undefined") {
        return true;
      }
      return this._value.length === 0;
    };

    DataType.prototype.toString = function() {
      return this.getValue();
    };

    return DataType;

  })(Cydr.Object);

  Cydr.Text = (function(_super) {

    __extends(Text, _super);

    function Text() {
      return Text.__super__.constructor.apply(this, arguments);
    }

    Text.prototype.LimitCharacterCount = function(count) {
      return this.getValue().substring(0, count);
    };

    Text.prototype.toString = function() {
      var _ref;
      return (_ref = this.getValue()) != null ? _ref.toString().replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : void 0;
    };

    return Text;

  })(Cydr.DataType);

  Cydr.HTMLText = (function(_super) {

    __extends(HTMLText, _super);

    function HTMLText() {
      return HTMLText.__super__.constructor.apply(this, arguments);
    }

    HTMLText.prototype.toString = function() {
      return this.getValue();
    };

    return HTMLText;

  })(Cydr.DataType);

  Cydr.Boolean = (function(_super) {

    __extends(Boolean, _super);

    function Boolean() {
      return Boolean.__super__.constructor.apply(this, arguments);
    }

    Boolean.prototype.Nice = function() {
      if (this.getValue()) {
        return "Yes";
      } else {
        return "No";
      }
    };

    Boolean.prototype.isFalsy = function() {
      return !this.getValue();
    };

    return Boolean;

  })(Cydr.DataType);

  Cydr.Model = (function(_super) {

    __extends(Model, _super);

    Model.prototype.properties = {};

    Model.prototype.has_many = {};

    Model.prototype.defaults = {};

    Model.prototype.casting = {};

    Model.prototype._mutatedProperties = {};

    Model.prototype._mutatedCollections = {};

    Model.prototype.controller = null;

    Model.isModel = true;

    Model.prototype.stat = function(prop) {
      return Cydr[this.getClass()][prop];
    };

    function Model(data) {
      var f, name, prop, type, val, _ref, _ref1, _ref2, _ref3, _ref4;
      Model.__super__.constructor.call(this);
      this._mutatedProperties = {};
      this._mutatedCollections = {};
      _ref = this.properties;
      for (name in _ref) {
        type = _ref[name];
        if (!((_ref1 = Cydr[type]) != null ? _ref1.isDataType : void 0)) {
          throw new Error("DataType 'Cydr." + type + "' does not exist!");
          break;
        }
        this._mutatedProperties[name] = new Cydr[type]();
        f = new Function("return this.obj('" + name + "');");
        this[name] = f.bind(this);
      }
      _ref2 = this.has_many;
      for (name in _ref2) {
        type = _ref2[name];
        if (!((_ref3 = window[type]) != null ? _ref3.isModel : void 0)) {
          throw new Error("Model '" + type + "' does not exist!");
          break;
        }
        this._mutatedCollections[name] = new Cydr.Collection(this, type, name);
        f = new Function("return this._mutatedCollections['" + name + "'].getList();");
        this[name] = f.bind(this);
      }
      _ref4 = this.defaults;
      for (prop in _ref4) {
        val = _ref4[prop];
        if (this.hasProp(prop)) {
          this._mutatedProperties[prop].setValue(val);
        }
      }
      for (prop in data) {
        val = data[prop];
        if (this.hasProp(prop)) {
          this._mutatedProperties[prop].setValue(val);
        }
      }
      this._mutatedProperties["__id__"] = Cydr.Object._instanceCount;
      this._mutatedProperties["__destroyed__"] = false;
    }

    Model.prototype.set = function(prop, value) {
      this._mutatedProperties[prop].setValue(value);
      return this.notify();
    };

    Model.prototype.obj = function(prop) {
      if ((!this.hasProp(prop)) && (!this.hasCollection(prop))) {
        return this.castFunction(prop);
      }
      return this._mutatedProperties[prop] || this._mutatedCollections[prop];
    };

    Model.prototype.get = function(prop) {
      if ((!this.hasProp(prop)) && (!this.hasCollection(prop))) {
        return this.castFunction(prop);
      } else {
        if (Cydr.prototype.isAnalyzing()) {
          Cydr.prototype.registerFunctionDependency(this.getClass(), prop);
        }
        if (this._mutatedProperties[prop]) {
          return this._mutatedProperties[prop].getValue();
        } else if (this._mutatedCollections[prop]) {
          return this._mutatedCollections[prop].getList();
        }
      }
    };

    Model.prototype.castFunction = function(func) {
      var dataType, ret;
      if (!Cydr.prototype.isAnalyzedFunction(this.getClass(), func)) {
        Cydr.prototype.beginAnalysis(this.getClass(), func);
        ret = this[func]();
        Cydr.prototype.endAnalysis();
      }
      if (!ret.isDataType && !ret.isDataList) {
        dataType = this.casting[func] || "Text";
        if (typeof Cydr[dataType] !== "function") {
          alert("Tried to cast " + func + " as " + dataType + ", but that datatype doesn't exist.");
          return;
        }
        return new Cydr[dataType](ret);
      }
      return ret;
    };

    Model.prototype.hasProp = function(prop) {
      return this.properties[prop] !== void 0;
    };

    Model.prototype.hasCollection = function(collection) {
      return this.has_many[collection] !== void 0;
    };

    Model.prototype.getID = function() {
      return this._mutatedProperties["__id__"];
    };

    Model.prototype.bindToElement = function(el) {
      var alpha, att, atts, binding, klass, rx, type, _i, _len, _results;
      rx = new RegExp('^cydr-', 'i');
      alpha = new RegExp('^[a-z0-9_]+$', 'i');
      atts = el.attributes || [];
      _results = [];
      for (_i = 0, _len = atts.length; _i < _len; _i++) {
        att = atts[_i];
        if (rx.test(att.name)) {
          type = att.name.split("-").pop();
          klass = "" + (type.charAt(0).toUpperCase() + type.slice(1)) + "Binding";
          if (typeof Cydr[klass] === "function") {
            binding = new Cydr[klass](this, el);
            if (!this.controller) {
              this.controller = binding.getController();
            }
            el.context = this;
            _results.push(binding.init());
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Model.prototype.applyBindingsToNode = function(node) {
      var att, atts, el, els, n, nl, rx, stack, _i, _len, _results;
      stack = [node];
      nl = node.getElementsByTagName("*" || []);
      els = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = nl.length; _i < _len; _i++) {
          n = nl[_i];
          _results.push(n);
        }
        return _results;
      })();
      els.unshift(node);
      rx = new RegExp('^cydr-', 'i');
      _results = [];
      for (_i = 0, _len = els.length; _i < _len; _i++) {
        el = els[_i];
        atts = (el != null ? el.attributes : void 0) || [];
        if (!(typeof el.getAttribute === "function" ? el.getAttribute("cydr-ignore") : void 0)) {
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = atts.length; _j < _len1; _j++) {
              att = atts[_j];
              if (rx.test(att.name)) {
                this.bindToElement(el);
                break;
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Model.prototype.notify = function() {
      var binding, bindings, _i, _len, _results;
      bindings = Cydr.prototype.getModelBindings(this.getClass() || []);
      _results = [];
      for (_i = 0, _len = bindings.length; _i < _len; _i++) {
        binding = bindings[_i];
        _results.push(binding.importValue());
      }
      return _results;
    };

    return Model;

  })(Cydr.Object);

  Cydr.Collection = (function(_super) {

    __extends(Collection, _super);

    Collection.prototype._list = [];

    Collection.prototype._nodes = [];

    Collection.prototype.owner = null;

    Collection.prototype.model = null;

    Collection.prototype.name = null;

    function Collection(owner, model, name, list) {
      this.owner = owner;
      this.model = model;
      this.name = name;
      Collection.__super__.constructor.call(this);
      if (!list) {
        list = [];
      }
      if (list.isDataList) {
        this._list = list;
      } else {
        this._list = new Cydr.DataList(list);
      }
      this._list.setCollection(this);
    }

    Collection.prototype.count = function() {
      return this._list.getItems().length;
    };

    Collection.prototype.push = function(data) {
      this._list.addItem(data);
      return this.owner.notify();
    };

    Collection.prototype.getItems = function() {
      return this._list.getItems();
    };

    Collection.prototype.getList = function() {
      return this._list;
    };

    return Collection;

  })(Cydr.Object);

  Cydr.DataList = (function(_super) {
    var _items;

    __extends(DataList, _super);

    DataList.prototype.isDataList = true;

    DataList.prototype.collection = null;

    _items = [];

    function DataList(items) {
      DataList.__super__.constructor.call(this);
      this._items = items;
    }

    DataList.prototype.setCollection = function(collection) {
      return this.collection = collection;
    };

    DataList.prototype.getItems = function() {
      return this._items;
    };

    DataList.prototype.push = function(model) {
      this._items.push(model);
      return this.collection.owner.notify();
    };

    DataList.prototype.filter = function(filter, value) {
      var field, i, operator, result, _i, _len, _ref;
      _ref = filter.split(":"), field = _ref[0], operator = _ref[1];
      if (!operator) {
        operator = "EqualTo";
      }
      result = [];
      switch (operator) {
        case "EqualTo":
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            i = items[_i];
            if (i.get(field === value)) {
              result.push(i);
            }
          }
      }
      return new DataList(result);
    };

    DataList.prototype.isFalsy = function() {
      return this._items.length === 0;
    };

    DataList.prototype.count = function() {
      return this._items.length;
    };

    return DataList;

  })(Cydr.Object);

  Cydr.Controller = (function(_super) {

    __extends(Controller, _super);

    function Controller(selector) {
      var node;
      Controller.__super__.constructor.call(this);
      node = document.querySelector(selector);
      if (node) {
        node.controller = this;
        this.applyBindingsToNode(node);
      }
    }

    return Controller;

  })(Cydr.Model);

}).call(this);
